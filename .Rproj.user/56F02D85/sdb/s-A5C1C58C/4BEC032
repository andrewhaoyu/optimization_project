{
    "collab_server" : "",
    "contents" : "\nrm(list=ls())\noptions(error = recover);\n\nlibrary(rstan);\nlibrary(NlcOptim)\nlibrary(MASS)\nlibrary(mvtnorm)\nCI95_empircal <- function(post.bounds){\n  x <- post.bounds[,1]\n  y <- post.bounds[,2]\n  max_x <- quantile(x,probs = 0.05)\n  x.seq <- seq(min(x),max_x,0.002)\n  y.seq <- seq(min(y),max(y),0.002)\n  n <- nrow(post.bounds)\n  x.y <- expand.grid(x.seq,y.seq)\n  pdf <- rep(0,nrow((x.y)))\n  colnames(x.y) <- c(\"x\",\"y\")\n  for( i in 1:nrow(x.y)){\n    idx <- which(post.bounds[,1]>=x.y[i,1]&post.bounds[,2]<=x.y[i,2])\n    pdf[i] <- length(idx)/n\n  }\n  result <- data.frame(x.y,pdf=pdf)\n  \n  idx <- which(abs(result$pdf-0.95)<1e-03)\n  differ <- result$y[idx]-result$x[idx]\n  jdx <- which.min(differ)\n  x.y.95 <- cbind(result$x[idx],result$y[idx])\n  if(length(jdx)>1){\n    jdx <- jdx[1]\n  }\n  final <- x.y.95[jdx,]\n  return(final)\n}\n\ncomputefunction <- function(a,b){\n  \n  mu1 <- mu[1]\n  sigma1 <- sqrt(Sigma[1,1])\n  result <- pmvnorm(lower=c(a,-Inf),upper = c(Inf,b),mean=mu,sigma=Sigma)\n  return((result[1]-0.95))\n}\n\nfn <- function(x){return(x[2]-x[1])}\ngr <- function(x){\n  g <- rep(NA,2)\n  g[1] <- -1\n  g[2] <- 1\n  return(g)\n}\n\nCI_95 <- function(post.bounds){\n  \n  \n  p0 <- c(0.5,0.6)\n  ans <- auglag(par=p0,fn=fn,gr=gr,heq=heq,heq.jac = heq.jac,hin = hin,hin.jac = hin.jac)\n  return(ans$par)\n}\n\n\n\n\n\n\nstan.model <- \"\ndata {\n\nint<lower=0> N[12];\n}\n\ntransformed data {\n\nvector[15] ones;\n\nfor(i in 1:15){\nones[i] = 1;\n}\n}\n\nparameters {\n\nsimplex[15] p;\nreal<lower=0, upper=1> q;\n\n}\n\ntransformed parameters {\n\nsimplex[12] op;\n\n\n\nop[1] = (1-q)*p[11];\nop[2] = (1-q)*p[12];\nop[3] = (1-q)*p[13];\nop[4] = (1-q)*p[14];\nop[5] = (1-q)*p[15];\nop[6]= (1-q)*(p[1]+p[2]+p[3]+p[4]+p[5]+p[6]+p[7]+p[8]+p[9]+p[10]);\nop[7] = q*(p[11]+p[6]);\nop[8] = q*(p[12]+p[7]);\nop[9] = q*(p[13]+p[8]);\nop[10] = q*(p[14]+p[9]);\nop[11] = q*(p[15]+p[10]);\nop[12] = q*(p[1]+p[2]+p[3]+p[4]+p[5]);\n\n}\n\nmodel {\np  ~ dirichlet(ones);\nq  ~ uniform(0,1);\nN  ~ multinomial(op);\n}\n\ngenerated quantities {\nreal<lower=0, upper=5> tp[7];\nreal bounds[2];\n\n\ntp[1] = (p[11]*1+p[12]*2+p[13]*3+p[14]*4+p[15]*5)/(p[11] + p[12]+p[13]+p[14]+p[15]);\ntp[2] = p[11] + p[12] + p[13] + p[14] + p[15];\ntp[3] = p[1]+p[2]+p[3]+p[4]+p[5] ;\ntp[4] = p[6]+p[7]+p[8]+p[9]+p[10];\ntp[5] = ((p[6]+p[11])+2*(p[7]+p[12])+3*(p[8]+p[13])+4*(p[9]+p[14])+5*(p[10]+p[15]))/(p[5]+p[6]+p[7]+p[8]+p[9]+p[10]+p[11]+p[12]+p[13]+p[14]+p[15]);\ntp[6] = (p[6]+2*p[7]+3*p[8]+4*p[9]+5*p[10])/(p[6]+p[7]+p[8]+p[9]+p[10]);\ntp[7] = 1*(p[1]+p[5]+p[11])+2*(p[2]+p[6]+p[12])+3*(p[3]+p[8]+p[13])+4*(p[4]+p[9]+p[13])+5*(p[5]+p[10]+p[15]);\n\n\n\nbounds[1] = tp[5] * (tp[2] + tp[4]) + tp[3];\nbounds[2] = tp[5] * (tp[2] + tp[4]) + 5*tp[3];\n}\n\n\"\n\n\ngernating.function <- function(r0,r1){\n  result <- rep(0,length(r0))\n  idx <- which(r0==0&r1==0)\n  result[idx] <- t(rmultinom(length(idx),1,prob=c(0.6,0.1,0.1,0.1,0.1)))%*%c(1,2,3,4,5)\n  idx <- which(r0==0&r1==1)\n  result[idx] <- t(rmultinom(length(idx),1,prob=c(0.1,0.1,0.6,0.1,0.1)))%*%c(1,2,3,4,5)\n  idx <- which(r0==1&r1==1)\n  result[idx] <- t(rmultinom(length(idx),1,prob=c(0.1,0.1,0.1,0.1,0.6)))%*%c(1,2,3,4,5)\n  return(result)\n  \n}\n\n\n\nsimulationtimes <- 500\npost.95 <- matrix(0,simulationtimes,2)\npost.b <- matrix(0,simulationtimes,2)\ntrue.y.result <- rep(0,simulationtimes)\nset.seed(1234)\nfor(simulation in 1:simulationtimes){\n  n <-2000# total number of people\n  K <- 5 # number of levels for Likert outcome\n  #result <- matrix(0,nrow=simulationtimes,ncol=(6+2*3*K*n))\n  final_result <- NULL\n  #simulation <- simulationtimes\n  \n  #print(paste0(\"we are in\",simulation,\"th run\"))\n  # n <-25# total number of people\n  # K <- 2 # number of levels for Likert outcome\n  # \n  # Start simulation\n  \n  #y <- sample(1:K,n,replace = T)\n  r1samp <- rbinom(n,1,0.8)\n  r2samp <- rbinom(n,1,0.8)\n  r0 <- pmin(r1samp,r2samp) # whether the individual will respond under low incentive\n  r1 <- pmax(r1samp,r2samp) # whether the individual will respond under high incentive\n  z <- rbinom(n,1,0.2) # the individual receive high or low incentive\n  r <- ifelse(z==1,r1,r0) # observed response indicator\n  \n  y <- gernating.function(r0,r1)\n  completedata <- cbind(z,r,y)\n  \n  true.y <- mean(completedata[,3])\n  true.y.result[simulation] <- true.y\n  \n  \n  \n  idx <- which(r==0)\n  y[idx] <- NA\n  data <- cbind(z,r,y)\n  \n  data_count <- table(z,r,y,useNA = \"ifany\")\n  n011 <- data_count[[3]]\n  n111 <- data_count[[4]]\n  n012 <- data_count[[7]]\n  n112 <- data_count[[8]]\n  n013 <- data_count[[11]]\n  n113 <- data_count[[12]]\n  n014 <- data_count[[15]]\n  n114 <- data_count[[16]]\n  n015 <- data_count[[19]]\n  n115 <- data_count[[20]]\n  m00 <- data_count[[21]]\n  m10 <- data_count[[22]]\n  \n  n.obs <- c(n011,n012,n013,n014,n015,m00,n111,n112,n113,n114,n115,m10)\n  # p_int<- c(0.024,rep(0.004,4),0.032,0.032,0.192,0.032,0.032,rep(0.064,4),0.384)\n  # q_int <- 0.2\n  # int <- list(list(p=p_int,q=q_int+runif(1,0,0.01)),\n  #             list(p=p_int,q=q_int+runif(1,0,0.01)),\n  #             list(p=p_int,q=q_int+runif(1,0,0.01)),\n  #             list(p=p_int,q=q_int+runif(1,0,0.01)),\n  #             list(p=p_int,q=q_int+runif(1,0,0.01))\n  # )\n  #n.obs <- c(100, 100, 100, 100, 100, 100);\n  #names(n.obs) <- c(\"n010\", \"n011\", \"m00\",\n  #                 \"n110\", \"n111\", \"m10\");\n  \n  rst <- stan(model_code = stan.model,\n              data = list(N=n.obs),\n              iter =20000, warmup = 6000, chains = 5,\n              thin = 5, verbose = TRUE);\n  print(rst);\n  \n  post.p <- extract(rst, \"p\")$p;\n  post.q <- extract(rst, \"q\")$q;\n  post.tp <- extract(rst, \"tp\")$tp;\n  post.bounds <- extract(rst, \"bounds\")$bounds;\n  \n  mu <- colMeans(post.bounds)\n  Sigma <- var(post.bounds)\n  mu1 <- mu[1]\n  mu2 <- mu[2]\n  sigma1 <- sqrt(2)\n  sigma2 <- sqrt(4)\n  p <- Sigma[1,2]/(sigma1*sigma2)\n  \n  \n  ##check if P(Y=1) is always in the bounds\n  mean(post.tp[,7] > post.bounds[,1] & post.tp[,7] < post.bounds[,2])\n  a <- CI95_empircal(post.bounds)\n  \n  post.95[simulation,1] <- a[1]\n  post.95[simulation,2] <- a[2]\n  post.b[simulation,] <- colMeans(post.bounds)\n  \n  \n}\n\n\nidx <- which(post.95[,1]<=0.53&post.95[,2]>=0.63)\njdx <- which(post.95[,1]<=true.y.result&post.95[,2]>=true.y.result)\npost.95 <- as.data.frame(post.95)\ncolnames(post.95) <- c(\"lower\",\"upper\")\nlibrary(ggplot2)\nplotdata <- data.frame(post.95,post.b)\ncolnames(plotdata) <- c(\"lower\",\"upper\",\"l\",\"u\")\nggplot(plotdata,aes(lower,upper))+geom_point()+geom_vline(xintercept=0.53)+geom_hline(yintercept = 0.63)+geom_point(aes(l,u),col=\"blue\")\n\nplotdata2 <- data.frame(post.bounds)\ncolnames(plotdata2) <- c(\"l\",\"u\")\nggplot(plotdata2,aes(l))+geom_density()\n",
    "created" : 1484336934914.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1284504688",
    "id" : "4BEC032",
    "lastKnownWriteTime" : 1484441799,
    "last_content_update" : 1484441799791,
    "path" : "~/Documents/study/advanced_ stat_theory/optimization_project/realdata/counter_code_multi.R",
    "project_path" : "realdata/counter_code_multi.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}