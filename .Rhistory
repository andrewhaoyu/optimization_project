idxPRonly = which(heter<=0.0003&ER>0.05&PR<=0.05&HER2>0.05)
length(idxPRonly)
#idxHER2
idxHER2only = which(heter<=0.0003&ER>0.05&PR>0.05&HER2<=0.05)
length(idxHER2only)
#ER and PR
idxERPR = which(heter<=0.0003&ER<=0.05&PR<=0.05&HER2>0.05)
length(idxERPR)
#PR and HER2
idxPRHER2 = which(heter<=0.0003&ER>0.05&PR<=0.05&HER2<=0.05)
length(idxPRHER2)
#ER and HER2
idxERHER2 = which(heter<=0.0003&ER<=0.05&PR>0.05&HER2<=0.05)
length(idxERHER2)
#ER PR and HER2
idxERPRHER2 = which(heter<=0.0003&ER<=0.05&PR<=0.05&HER2<=0.05)
length(idxERPRHER2)
data = read.csv("/Users/haoyuzhang/Desktop/pvalue_result.csv")
heter= data$global.heterogeneity.p.value
PR=data$P_value.for.PR.main.effect
ER= data$P_value.for.ER.main.effect
HER2 = data$P_value.for.HER2.main.effect
idx1 = which(heter<=0.0003)
length(idx1)
#ER only
idxERonly = which(heter<=0.0003&ER<=0.05&PR>0.05&HER2>0.05)
length(idxERonly)
#idxPRonly
idxPRonly = which(heter<=0.0003&ER>0.05&PR<=0.05&HER2>0.05)
length(idxPRonly)
#idxHER2
idxHER2only = which(heter<=0.0003&ER>0.05&PR>0.05&HER2<=0.05)
length(idxHER2only)
#ER and PR
idxERPR = which(heter<=0.0003&ER<=0.05&PR<=0.05&HER2>0.05)
length(idxERPR)
#PR and HER2
idxPRHER2 = which(heter<=0.0003&ER>0.05&PR<=0.05&HER2<=0.05)
length(idxPRHER2)
#ER and HER2
idxERHER2 = which(heter<=0.0003&ER<=0.05&PR>0.05&HER2<=0.05)
length(idxERHER2)
#ER PR and HER2
idxERPRHER2 = which(heter<=0.0003&ER<=0.05&PR<=0.05&HER2<=0.05)
length(idxERPRHER2)
idx0 = which(global_p<=0.0003)
length(idx0)
global_p=data$global.test.p.value
idx0 = which(global_p<=0.0003)
length(idx0)
8+1+6+5
a = matrix(c(1,2,3,4,5,6),3,2)
a
cor(a)
rm(list=ls());
library(rstan);
rstan_options(auto_write=TRUE);
options(mc.cores=parallel::detectCores(), error=recover);
order(c(3,1,2))
order(c(3,1,2))[1:3]
order(c(7,5,4))[1:3]
order(c(7,5,4,0))[1:3]
a = c(7,5,3,0)
a[order(a)]
n = 5; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = maximinLHS(n,d);
x
?maximinLHS
y = computer_simulator(x);
GPmodel = GP_fit(x,y);
librart(GP_fit)
library(GP_fit)
library(GPfit)
n = 5; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = maximinLHS(n,d);
y = computer_simulator(x);
GPmodel = GP_fit(x,y);
print(GPmodel)
n = 7; d = 1;
computer_simulator <- function(x) {
y <- log(x+0.1)+sin(5*pi*x);
return(y)
}
set.seed(1);
library(lhs);
x = maximinLHS(n,d);
y = computer_simulator(x);
GPmodel = GP_fit(x,y);
print(GPmodel, digits = 4)
plot.GP(GPmodel)
plot.GP(GPmodel)
n = 7; d = 1;
computer_simulator <- function(x) {
y = log(x+0.1)+sin(5*pi*x);
return(y)
}
set.seed(1);
library(lhs);
x = maximinLHS(n,d);
y = computer_simulator(x);
GPmodel = GP_fit(x,y);
## Plotting with changes from the default line type and characters
plot.GP(GPmodel, resolution = 100, line_type = c(6,2), pch = 5)
n = 5; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = unif(n)
x = runif(n)
y = computer_simulator(x);
xvec <- seq(from=0,to=1,length.out=10);
GPmodel = GP_fit(x,y);
GPprediction = predict.GP(GPmodel,xvec);
yhat = GPprediction$Y_hat;
mse = GPprediction$MSE;
completedata = GPprediction$complete_data;
completedata;
plot.GP(GPmodel)
n = 50; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = runif(n)
y = computer_simulator(x);
xvec <- seq(from=0,to=1,length.out=10);
GPmodel = GP_fit(x,y);
GPprediction = predict.GP(GPmodel,xvec);
yhat = GPprediction$Y_hat;
mse = GPprediction$MSE;
completedata = GPprediction$complete_data;
completedata;
plot.GP(GPmodel)
plot(xvec,computer_simulator(xvec))
n = 50; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = runif(n)
y = computer_simulator(x);
xvec <- seq(from=0,to=1,length.out=100);
GPmodel = GP_fit(x,y);
GPprediction = predict.GP(GPmodel,xvec);
yhat = GPprediction$Y_hat;
mse = GPprediction$MSE;
completedata = GPprediction$complete_data;
completedata;
plot.GP(GPmodel)
plot(xvec,computer_simulator(xvec))
n = 500; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = runif(n)
y = computer_simulator(x);
xvec <- seq(from=0,to=1,length.out=1000);
GPmodel = GP_fit(x,y);
n = 200; d = 1;
computer_simulator <- function(x){
x = 2*x+0.5;
y = sin(10*pi*x)/(2*x) + (x-1)^4;
return(y)
}
set.seed(3);
library(lhs);
x = runif(n)
y = computer_simulator(x);
xvec <- seq(from=0,to=1,length.out=200);
GPmodel = GP_fit(x,y);
GPprediction = predict.GP(GPmodel,xvec);
yhat = GPprediction$Y_hat;
mse = GPprediction$MSE;
completedata = GPprediction$complete_data;
completedata;
plot.GP(GPmodel)
install.packages("devtools","hadley")
install_github("devtools","hadley")
?install_github
library(devtools)
install_gihub("devtools","hadley")
install_github("devtools")
install_github("devtools","hadley")
library(rstan)
a=0
b=0
c=1
install.packages("rstan")
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores=parallel::detectCores())
a=0
b=0
c=1
simu.data <- function(ntrain,ntest,n, a=0, b=0, c=1) {
w <- runif(n);
y <- a+b*w+c*w^2;
list(Ntrain=ntrain,Ntest=ntest, N=n, y=y, w=w)
}
stan.model <-'
functions {
real kappa_f(real x, real xprime, real lambda, int covfn) {
real d;
real tmp;
real rst;
d = (x-xprime)^2;
d = lambda * sqrt(d);
if (0 == covfn) {
rst = exp(-d^2/2);
} else if (1 == covfn) {
tmp = sqrt(3)*d;
rst = (1 + tmp) * exp(-tmp);
} else if (2 == covfn) {
tmp = sqrt(5)*d;
rst = (1 + tmp + tmp^2/3) * exp(-tmp);
}
return(rst);
}
matrix kxx(vector x, int ntot, int covfn, real lambda, real tau2, real sigma2) {
matrix[ntot, ntot] rst;
for (i in 1:ntot) {
# nugget 0.00001 for stability
rst[i,i] = tau2 + sigma2 + 0.00001;
for (j in (i+1):ntot) {
rst[i,j] = tau2 * kappa_f(x[i], x[j], lambda, covfn);
rst[j,i] = rst[i,j];
}
}
return(rst);
}
}
data {
//define data
int<lower=0> Ntrain;
int<lower=0> Ntest;
int<lower=0> N;
vector[Ntrain]          y;
vector<lower=0,upper=1>[N]    w;
int          COVFN;
}
parameters{
//define prior
//real           beta;
real<lower=0>  tau2;
real<lower=0>  sigma2;
real<lower=0>  lambda;
}
transformed parameters{
//declare mu,Sigma
vector[N]   mu;
matrix[N,N] Sigma;
vector[Ntrain]   f;
//define mu
for(i in 1:N)
mu[i] = 0;
Sigma = kxx(w, N, COVFN, lambda, tau2, sigma2);
}
model{
//prior
//beta   ~ normal(0,1000);
lambda ~ cauchy(0, 2.5);
sigma2 ~ lognormal(0, 2);
tau2   ~ lognormal(0, 2);
//relation between f and m, since z|m~normal(m,1)
target += multi_normal_lpdf(y | mu, Sigma);
}'
smodel <- stan_model(model_code = stan.model);
n_train = 100
n_test = 10
data   <- simu.data(n_train,n_test,n_train+n_test);
data$y = data$y[1:n_train]
fit1   <- sampling(smodel,
data    = c(data, list(COVFN=1)),
warmup  = 4000,
iter    = 8000,
control = list(adapt_delta = 0.95),
chains  = 4)
simulation.data
data
stan.model <-'
functions {
real kappa_f(real x, real xprime, real lambda, int covfn) {
real d;
real tmp;
real rst;
d = (x-xprime)^2;
d = lambda * sqrt(d);
if (0 == covfn) {
rst = exp(-d^2/2);
} else if (1 == covfn) {
tmp = sqrt(3)*d;
rst = (1 + tmp) * exp(-tmp);
} else if (2 == covfn) {
tmp = sqrt(5)*d;
rst = (1 + tmp + tmp^2/3) * exp(-tmp);
}
return(rst);
}
matrix kxx(vector x, int ntot, int covfn, real lambda, real tau2, real sigma2) {
matrix[ntot, ntot] rst;
for (i in 1:ntot) {
# nugget 0.00001 for stability
rst[i,i] = tau2 + sigma2 + 0.00001;
for (j in (i+1):ntot) {
rst[i,j] = tau2 * kappa_f(x[i], x[j], lambda, covfn);
rst[j,i] = rst[i,j];
}
}
return(rst);
}
}
data {
//define data
int<lower=0> Ntrain;
int<lower=0> Ntest;
int<lower=0> N;
vector[Ntrain]          y;
vector<lower=0,upper=1>[N]    w;
int          COVFN;
}
parameters{
//define prior
//real           beta;
real<lower=0>  tau2;
real<lower=0>  sigma2;
real<lower=0>  lambda;
}
transformed parameters{
//declare mu,Sigma
vector[N]   mu;
matrix[N,N] Sigma;
vector[Ntrain]   f;
//define mu
for(i in 1:N)
mu[i] = w[i]*beta;
Sigma = kxx(w, N, COVFN, lambda, tau2, sigma2);
}
model{
//prior
//beta   ~ normal(0,1000);
lambda ~ cauchy(0, 2.5);
sigma2 ~ lognormal(0, 2);
tau2   ~ lognormal(0, 2);
//relation between f and m, since z|m~normal(m,1)
target += multi_normal_lpdf(y | mu, Sigma);
}'
smodel <- stan_model(model_code = stan.model);
stan.model <-'
functions {
real kappa_f(real x, real xprime, real lambda, int covfn) {
real d;
real tmp;
real rst;
d = (x-xprime)^2;
d = lambda * sqrt(d);
if (0 == covfn) {
rst = exp(-d^2/2);
} else if (1 == covfn) {
tmp = sqrt(3)*d;
rst = (1 + tmp) * exp(-tmp);
} else if (2 == covfn) {
tmp = sqrt(5)*d;
rst = (1 + tmp + tmp^2/3) * exp(-tmp);
}
return(rst);
}
matrix kxx(vector x, int ntot, int covfn, real lambda, real tau2, real sigma2) {
matrix[ntot, ntot] rst;
for (i in 1:ntot) {
# nugget 0.00001 for stability
rst[i,i] = tau2 + sigma2 + 0.00001;
for (j in (i+1):ntot) {
rst[i,j] = tau2 * kappa_f(x[i], x[j], lambda, covfn);
rst[j,i] = rst[i,j];
}
}
return(rst);
}
}
data {
//define data
int<lower=0> Ntrain;
int<lower=0> Ntest;
int<lower=0> N;
vector[Ntrain]          y;
vector<lower=0,upper=1>[N]    w;
int          COVFN;
}
parameters{
//define prior
//real           beta;
real<lower=0>  tau2;
real<lower=0>  sigma2;
real<lower=0>  lambda;
}
transformed parameters{
//declare mu,Sigma
vector[N]   mu;
matrix[N,N] Sigma;
vector[Ntrain]   f;
//define mu
for(i in 1:N)
mu[i] = w[i]*beta;
Sigma = kxx(w, N, COVFN, lambda, tau2, sigma2);
}
model{
//prior
//
beta   ~ normal(0,1000);
lambda ~ cauchy(0, 2.5);
sigma2 ~ lognormal(0, 2);
tau2   ~ lognormal(0, 2);
//relation between f and m, since z|m~normal(m,1)
target += multi_normal_lpdf(y | mu, Sigma);
}'
smodel <- stan_model(model_code = stan.model);
stan.model <-'
functions {
real kappa_f(real x, real xprime, real lambda, int covfn) {
real d;
real tmp;
real rst;
d = (x-xprime)^2;
d = lambda * sqrt(d);
if (0 == covfn) {
rst = exp(-d^2/2);
} else if (1 == covfn) {
tmp = sqrt(3)*d;
rst = (1 + tmp) * exp(-tmp);
} else if (2 == covfn) {
tmp = sqrt(5)*d;
rst = (1 + tmp + tmp^2/3) * exp(-tmp);
}
return(rst);
}
matrix kxx(vector x, int ntot, int covfn, real lambda, real tau2, real sigma2) {
matrix[ntot, ntot] rst;
for (i in 1:ntot) {
# nugget 0.00001 for stability
rst[i,i] = tau2 + sigma2 + 0.00001;
for (j in (i+1):ntot) {
rst[i,j] = tau2 * kappa_f(x[i], x[j], lambda, covfn);
rst[j,i] = rst[i,j];
}
}
return(rst);
}
}
data {
//define data
int<lower=0> Ntrain;
int<lower=0> Ntest;
int<lower=0> N;
vector[Ntrain]          y;
vector<lower=0,upper=1>[N]    w;
int          COVFN;
}
parameters{
//define prior
//real           beta;
real<lower=0>  tau2;
real<lower=0>  sigma2;
real<lower=0>  lambda;
}
transformed parameters{
//declare mu,Sigma
vector[N]   mu;
matrix[N,N] Sigma;
vector[Ntrain]   f;
//define mu
for(i in 1:N)
mu[i] = 0;
Sigma = kxx(w, N, COVFN, lambda, tau2, sigma2);
}
model{
//prior
beta   ~ normal(0,1000);
lambda ~ cauchy(0, 2.5);
sigma2 ~ lognormal(0, 2);
tau2   ~ lognormal(0, 2);
//relation between f and m, since z|m~normal(m,1)
target += multi_normal_lpdf(y | mu, Sigma);
}'
smodel <- stan_model(model_code = stan.model);
